version: '3.8'

services:
  # Enhanced PostgreSQL Database with Production Optimizations
  postgres:
    image: postgres:15-alpine
    container_name: x-marketing-postgres
    environment:
      POSTGRES_DB: x_marketing_automation
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      POSTGRES_SHARED_PRELOAD_LIBRARIES: "pg_stat_statements"
      POSTGRES_MAX_CONNECTIONS: "200"
      POSTGRES_SHARED_BUFFERS: "256MB"
      POSTGRES_EFFECTIVE_CACHE_SIZE: "1GB"
      POSTGRES_MAINTENANCE_WORK_MEM: "64MB"
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: "0.9"
      POSTGRES_WAL_BUFFERS: "16MB"
      POSTGRES_DEFAULT_STATISTICS_TARGET: "100"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./logs/postgres:/var/log/postgresql
    networks:
      - x-marketing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d x_marketing_automation"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Enhanced Redis with Production Configuration
  redis:
    image: redis:7-alpine
    container_name: x-marketing-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    networks:
      - x-marketing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Enhanced Backend API with Production Configuration
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: x-marketing-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/x_marketing_automation
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your_super_secret_jwt_key_here_change_in_production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-your_32_character_encryption_key_here}
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs/backend:/app/logs
    networks:
      - x-marketing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: x-marketing-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - x-marketing-network

  # Telegram Bot
  telegram-bot:
    build:
      context: ./telegram-bot
      dockerfile: Dockerfile
    container_name: x-marketing-telegram
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://backend:3001
    depends_on:
      - backend
    volumes:
      - ./telegram-bot:/app
      - /app/node_modules
    networks:
      - x-marketing-network

  # LLM Service
  llm-service:
    build:
      context: ./llm-service
      dockerfile: Dockerfile
    container_name: x-marketing-llm
    ports:
      - "3003:3003"
    environment:
      - FLASK_ENV=production
      - OLLAMA_HOST=http://ollama:11434
    depends_on:
      - ollama
    volumes:
      - ./llm-service:/app
    networks:
      - x-marketing-network

  # Ollama for local LLM
  ollama:
    image: ollama/ollama:latest
    container_name: x-marketing-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - x-marketing-network

  # Automation Engine
  automation-engine:
    build:
      context: ./automation-engine
      dockerfile: Dockerfile
    container_name: x-marketing-automation
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/x_marketing
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:3001
      - LLM_SERVICE_URL=http://llm-service:3003
    depends_on:
      - postgres
      - redis
      - backend
      - llm-service
    volumes:
      - ./automation-engine:/app
      - /app/node_modules
    networks:
      - x-marketing-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: x-marketing-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - x-marketing-network

volumes:
  postgres_data:
  redis_data:
  ollama_data:

networks:
  x-marketing-network:
    driver: bridge
