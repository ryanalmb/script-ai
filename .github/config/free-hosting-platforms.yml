# Free Hosting Platforms Configuration
# Phase 3: Advanced CI/CD Features - Free Hosting Integration

# Global configuration
global:
  version: "3.0"
  strategy: "multi_platform_redundancy"
  cost_optimization: true
  auto_scaling: false  # Disabled for free tiers
  
# Platform configurations and limits (2024)
platforms:
  vercel:
    name: "Vercel"
    type: "frontend_focused"
    suitable_services: ["frontend"]
    
    # Free tier limits
    limits:
      bandwidth: "100GB/month"
      build_minutes: "6000/month"
      deployments: "unlimited"
      team_members: 1
      domains: "unlimited"
      functions: "12 serverless functions"
      function_duration: "10s"
      function_memory: "1024MB"
      edge_functions: "100,000 invocations/month"
      
    # Features
    features:
      - "Automatic HTTPS"
      - "Global CDN"
      - "Git integration"
      - "Preview deployments"
      - "Analytics (basic)"
      - "Edge functions"
      - "Image optimization"
      
    # Configuration
    config:
      build_command: "npm run build"
      output_directory: ".next"
      install_command: "npm ci"
      node_version: "18.x"
      
    # Deployment settings
    deployment:
      auto_deploy: true
      preview_branches: true
      production_branch: "main"
      environment_variables: true
      
  netlify:
    name: "Netlify"
    type: "jamstack_focused"
    suitable_services: ["frontend", "telegram-bot"]
    
    # Free tier limits
    limits:
      bandwidth: "100GB/month"
      build_minutes: "300/month"
      sites: "unlimited"
      team_members: 1
      forms: "100 submissions/month"
      functions: "125,000 invocations/month"
      function_duration: "10s"
      function_memory: "1024MB"
      
    # Features
    features:
      - "Automatic HTTPS"
      - "Global CDN"
      - "Git integration"
      - "Branch deploys"
      - "Form handling"
      - "Serverless functions"
      - "Split testing"
      
    # Configuration
    config:
      build_command: "npm run build"
      publish_directory: "dist"
      functions_directory: "netlify/functions"
      
    # Deployment settings
    deployment:
      auto_deploy: true
      branch_deploys: true
      production_branch: "main"
      
  railway:
    name: "Railway"
    type: "full_stack"
    suitable_services: ["backend", "telegram-bot", "llm-service"]
    
    # Free tier limits (Hobby Plan)
    limits:
      usage_hours: "500 hours/month"
      memory: "512MB per service"
      cpu: "shared"
      storage: "1GB"
      bandwidth: "unlimited"
      services: "3 services"
      
    # Features
    features:
      - "Database hosting"
      - "Environment variables"
      - "Custom domains"
      - "GitHub integration"
      - "Automatic deployments"
      - "Logs and metrics"
      - "PostgreSQL/Redis"
      
    # Configuration
    config:
      dockerfile: "Dockerfile"
      build_command: "npm run build"
      start_command: "npm start"
      
    # Deployment settings
    deployment:
      auto_deploy: true
      zero_downtime: false  # Not available on free tier
      health_checks: true
      
  render:
    name: "Render"
    type: "full_stack"
    suitable_services: ["backend", "frontend", "telegram-bot", "llm-service"]
    
    # Free tier limits
    limits:
      build_minutes: "500/month"
      bandwidth: "100GB/month"
      services: "unlimited"
      memory: "512MB per service"
      cpu: "0.1 CPU"
      storage: "1GB SSD"
      sleep_after: "15 minutes inactivity"
      
    # Features
    features:
      - "Automatic HTTPS"
      - "Custom domains"
      - "Environment variables"
      - "Auto-deploy from Git"
      - "Health checks"
      - "Logs"
      - "PostgreSQL database"
      
    # Configuration
    config:
      dockerfile: "Dockerfile"
      build_command: "npm run build"
      start_command: "npm start"
      
    # Deployment settings
    deployment:
      auto_deploy: true
      health_checks: true
      auto_sleep: true  # Services sleep after 15min inactivity
      
  fly_io:
    name: "Fly.io"
    type: "container_focused"
    suitable_services: ["backend", "telegram-bot", "llm-service"]
    
    # Free tier limits (Hobby Plan)
    limits:
      apps: "3 apps"
      memory: "256MB per app"
      cpu: "shared-cpu-1x"
      storage: "3GB persistent volumes"
      bandwidth: "160GB/month"
      
    # Features
    features:
      - "Global deployment"
      - "Custom domains"
      - "Automatic HTTPS"
      - "Health checks"
      - "Metrics and logs"
      - "PostgreSQL"
      - "Redis"
      
    # Configuration
    config:
      dockerfile: "Dockerfile"
      app_config: "fly.toml"
      
    # Deployment settings
    deployment:
      auto_deploy: false  # Manual deployment
      health_checks: true
      zero_downtime: true
      
  digitalocean_app_platform:
    name: "DigitalOcean App Platform"
    type: "full_stack"
    suitable_services: ["backend", "frontend", "telegram-bot"]
    
    # Free tier limits (Static Sites only)
    limits:
      static_sites: "3 sites"
      bandwidth: "100GB/month"
      build_minutes: "unlimited"
      storage: "unlimited"
      
    # Features (Static sites only on free tier)
    features:
      - "Global CDN"
      - "Automatic HTTPS"
      - "Custom domains"
      - "Git integration"
      - "Preview deployments"
      
    # Configuration
    config:
      build_command: "npm run build"
      output_dir: "dist"
      
    # Deployment settings
    deployment:
      auto_deploy: true
      static_only: true  # Free tier limitation

# Service-to-platform mapping strategy
service_mapping:
  frontend:
    primary: "vercel"
    fallback: ["netlify", "digitalocean_app_platform"]
    strategy: "performance_first"
    
  backend:
    primary: "railway"
    fallback: ["render", "fly_io"]
    strategy: "reliability_first"
    
  telegram-bot:
    primary: "railway"
    fallback: ["render", "netlify"]
    strategy: "uptime_first"
    
  llm-service:
    primary: "render"
    fallback: ["railway", "fly_io"]
    strategy: "resource_optimized"

# Cost optimization strategies
cost_optimization:
  # Multi-platform distribution
  distribution_strategy:
    - name: "service_separation"
      description: "Deploy different services on different platforms"
      benefits: ["Maximize free tier usage", "Reduce single platform dependency"]
      
    - name: "geographic_distribution"
      description: "Use multiple platforms for geographic redundancy"
      benefits: ["Better global performance", "Disaster recovery"]
      
    - name: "load_balancing"
      description: "Distribute traffic across multiple free instances"
      benefits: ["Higher availability", "Better resource utilization"]
      
  # Resource optimization
  resource_optimization:
    - name: "container_optimization"
      description: "Optimize Docker images for memory and CPU constraints"
      techniques: ["Multi-stage builds", "Alpine base images", "Dependency pruning"]
      
    - name: "code_splitting"
      description: "Split applications to fit within platform limits"
      techniques: ["Microservices", "Function separation", "Asset optimization"]
      
    - name: "caching_strategy"
      description: "Aggressive caching to reduce compute usage"
      techniques: ["CDN caching", "Application caching", "Database query caching"]
      
  # Usage monitoring
  usage_monitoring:
    - name: "bandwidth_tracking"
      description: "Monitor bandwidth usage across platforms"
      alerts: ["80% usage warning", "95% usage critical"]
      
    - name: "build_minute_tracking"
      description: "Track build minutes consumption"
      optimization: ["Cache dependencies", "Parallel builds", "Incremental builds"]
      
    - name: "function_invocation_tracking"
      description: "Monitor serverless function usage"
      optimization: ["Function consolidation", "Cold start reduction"]

# Deployment orchestration
deployment_orchestration:
  # Multi-platform deployment workflow
  workflow:
    - stage: "preparation"
      actions:
        - "Analyze service requirements"
        - "Select optimal platforms"
        - "Prepare platform-specific configurations"
        
    - stage: "deployment"
      actions:
        - "Deploy to primary platforms"
        - "Configure DNS and load balancing"
        - "Set up monitoring and alerts"
        
    - stage: "validation"
      actions:
        - "Health check all deployments"
        - "Performance testing"
        - "Failover testing"
        
    - stage: "optimization"
      actions:
        - "Monitor resource usage"
        - "Optimize based on metrics"
        - "Scale within free tier limits"

# DNS and load balancing
dns_management:
  # Free DNS providers
  providers:
    - name: "Cloudflare"
      features: ["Free DNS", "DDoS protection", "SSL certificates", "CDN"]
      limits: "Unlimited DNS queries"
      
    - name: "Route53"
      features: ["Reliable DNS", "Health checks", "Failover routing"]
      cost: "$0.50 per hosted zone/month"
      
  # Load balancing strategy
  load_balancing:
    method: "dns_round_robin"
    health_checks: true
    failover: "automatic"
    
    # Configuration
    config:
      ttl: 300  # 5 minutes
      health_check_interval: 60  # 1 minute
      failure_threshold: 3

# Monitoring and alerting
monitoring:
  # Free monitoring tools
  tools:
    - name: "UptimeRobot"
      features: ["Uptime monitoring", "50 monitors free", "Email alerts"]
      
    - name: "Pingdom"
      features: ["Website monitoring", "1 check free", "SMS alerts"]
      
    - name: "StatusCake"
      features: ["Uptime monitoring", "10 tests free", "Push notifications"]
      
  # Metrics to track
  metrics:
    - "Service availability"
    - "Response time"
    - "Error rates"
    - "Resource usage"
    - "Platform limits consumption"
    
  # Alert thresholds
  alerts:
    uptime: "< 99%"
    response_time: "> 2000ms"
    error_rate: "> 5%"
    bandwidth_usage: "> 80%"
    build_minutes: "> 80%"

# Security considerations
security:
  # Free SSL/TLS
  ssl:
    providers: ["Let's Encrypt", "Cloudflare", "Platform-provided"]
    auto_renewal: true
    
  # Environment variables
  secrets_management:
    - "Use platform-provided secret management"
    - "Separate secrets per environment"
    - "Regular secret rotation"
    
  # Access control
  access_control:
    - "GitHub-based authentication"
    - "Team access management"
    - "Deployment permissions"

# Twikit integration considerations
twikit_integration:
  # Platform suitability for Twikit
  platform_compatibility:
    railway:
      suitable: true
      features: ["Persistent storage", "Long-running processes", "Database support"]
      limitations: ["Memory limits", "CPU sharing"]
      
    render:
      suitable: true
      features: ["Container support", "Database integration", "Health checks"]
      limitations: ["Auto-sleep", "Cold starts"]
      
    fly_io:
      suitable: true
      features: ["Global deployment", "Persistent volumes", "Always-on"]
      limitations: ["Memory constraints", "Limited free apps"]
      
    vercel:
      suitable: false
      reason: "Serverless functions not suitable for persistent Twikit sessions"
      
    netlify:
      suitable: false
      reason: "JAMstack focus, limited backend capabilities"
      
  # Twikit-specific optimizations
  optimizations:
    - name: "session_persistence"
      description: "Ensure Twikit sessions survive deployments"
      implementation: ["Database session storage", "Redis session cache"]
      
    - name: "rate_limit_coordination"
      description: "Coordinate rate limiting across instances"
      implementation: ["Centralized rate limit store", "Redis coordination"]
      
    - name: "proxy_management"
      description: "Manage proxy rotation efficiently"
      implementation: ["Proxy pool management", "Health checking"]

# Migration and backup strategies
migration:
  # Platform migration
  migration_strategy:
    - "Gradual traffic shifting"
    - "DNS-based failover"
    - "Data migration planning"
    - "Rollback procedures"
    
  # Backup strategies
  backup:
    - "Database backups"
    - "Configuration backups"
    - "Code repository mirroring"
    - "Deployment artifact storage"
