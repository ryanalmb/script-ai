#!/usr/bin/env python3
"""
Test Fixed Telegram Bot Functionality
Verifies that all commands and callback buttons work properly
"""
import requests
import json
import time
from datetime import datetime

def test_bot_status():
    """Test if bot is running and healthy"""
    print("ü§ñ Testing Bot Status...")
    print("=" * 50)
    
    try:
        # Test bot health endpoint
        response = requests.get('http://localhost:3002/health', timeout=5)
        if response.status_code == 200:
            health_data = response.json()
            print(f"‚úÖ Bot service healthy: {health_data.get('status')}")
            print(f"   Uptime: {health_data.get('uptime', 0):.2f} seconds")
            return True
        else:
            print(f"‚ùå Bot health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Cannot connect to bot: {str(e)}")
        return False

def test_telegram_connection():
    """Test Telegram API connection"""
    print("\nüîó Testing Telegram API Connection...")
    print("=" * 50)
    
    bot_token = "7848656841:AAFm6v8KPzn1zPZmHKklXjkIwzQ8fYY25O0"
    
    try:
        response = requests.get(f"https://api.telegram.org/bot{bot_token}/getMe", timeout=10)
        if response.status_code == 200:
            bot_info = response.json()
            if bot_info.get('ok'):
                bot_data = bot_info.get('result', {})
                print(f"‚úÖ Bot connected: @{bot_data.get('username')}")
                print(f"   Bot ID: {bot_data.get('id')}")
                print(f"   Name: {bot_data.get('first_name')}")
                return True, bot_data
            else:
                print(f"‚ùå Telegram API error: {bot_info.get('description')}")
                return False, None
        else:
            print(f"‚ùå HTTP Error: {response.status_code}")
            return False, None
    except Exception as e:
        print(f"‚ùå Connection error: {str(e)}")
        return False, None

def test_llm_integration():
    """Test LLM service integration"""
    print("\nüß† Testing LLM Service Integration...")
    print("=" * 50)
    
    try:
        # Test content generation
        response = requests.post(
            'http://localhost:3003/generate',
            json={
                "topic": "test bot functionality",
                "tone": "professional",
                "length": "short",
                "platform": "twitter"
            },
            timeout=15
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ LLM service integration working")
                print(f"   Generated content ID: {data.get('content', {}).get('id', 'Unknown')}")
                print(f"   Content preview: {data.get('content', {}).get('text', 'No text')[:50]}...")
                return True
            else:
                print("‚ùå LLM service not generating content")
                return False
        else:
            print(f"‚ùå LLM service error: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå LLM service error: {str(e)}")
        return False

def test_create_campaign_workflow():
    """Test the complete create campaign workflow"""
    print("\nüöÄ Testing Create Campaign Workflow...")
    print("=" * 50)
    
    # Test the LLM service with the same request the bot would make
    campaign_prompt = "I want to promote my crypto course to young investors"
    
    try:
        print(f"üîÑ Testing campaign creation with prompt: '{campaign_prompt}'")
        
        response = requests.post(
            'http://localhost:3003/generate',
            json={
                "topic": campaign_prompt,
                "tone": "professional",
                "length": "medium",
                "platform": "twitter"
            },
            timeout=20
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                content = data.get('content', {})
                print("‚úÖ Campaign content generation successful!")
                print(f"   Content ID: {content.get('id', 'Unknown')}")
                print(f"   Content length: {content.get('metadata', {}).get('character_count', 'Unknown')} chars")
                print(f"   Generated text: {content.get('text', 'No text')[:100]}...")
                print(f"   Hashtags: {data.get('hashtags', [])}")
                print(f"   Engagement score: {data.get('engagement_score', 'N/A')}")
                return True
            else:
                print("‚ùå Campaign content generation failed")
                return False
        else:
            print(f"‚ùå Campaign generation HTTP error: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Campaign generation error: {str(e)}")
        return False

def test_content_analysis():
    """Test content analysis functionality"""
    print("\nüîç Testing Content Analysis...")
    print("=" * 50)
    
    test_content = "Learn cryptocurrency fundamentals with our comprehensive course designed for young investors"
    
    try:
        response = requests.post(
            'http://localhost:3003/analyze',
            json={"content": test_content},
            timeout=15
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ Content analysis working")
                print(f"   Sentiment: {data.get('sentiment', 'Unknown')}")
                print(f"   Quality score: {data.get('quality_score', 'N/A')}")
                print(f"   Engagement potential: {data.get('engagement_potential', 'N/A')}")
                return True
            else:
                print("‚ùå Content analysis failed")
                return False
        else:
            print(f"‚ùå Content analysis HTTP error: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Content analysis error: {str(e)}")
        return False

def test_service_communication():
    """Test communication between all services"""
    print("\nüîÑ Testing Service Communication...")
    print("=" * 50)
    
    services = {
        'Telegram Bot': 'http://localhost:3002/health',
        'LLM Service': 'http://localhost:3003/health',
        'Backend API': 'http://localhost:3001/health'
    }
    
    results = {}
    
    for service_name, url in services.items():
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                results[service_name] = "‚úÖ Running"
            elif response.status_code == 503:
                results[service_name] = "‚ö†Ô∏è Degraded"
            else:
                results[service_name] = f"‚ùå Error {response.status_code}"
        except Exception as e:
            results[service_name] = "‚ùå Offline"
    
    print("Service Status:")
    for service, status in results.items():
        print(f"   {service}: {status}")
    
    # Count healthy services
    healthy_services = sum(1 for status in results.values() if "‚úÖ" in status or "‚ö†Ô∏è" in status)
    return healthy_services >= 2  # At least 2 services should be running

def create_user_testing_guide():
    """Create a comprehensive user testing guide"""
    print("\nüì± User Testing Guide...")
    print("=" * 50)
    
    print("üéØ **MANUAL TESTING INSTRUCTIONS**")
    print()
    print("**Step 1: Access the Bot**")
    print("1. Open Telegram")
    print("2. Search for @MarketingProAI_bot")
    print("3. Start a conversation")
    print()
    print("**Step 2: Test Core Commands**")
    print("‚Ä¢ /start - Should show welcome message with buttons")
    print("‚Ä¢ /help - Should show help menu with interactive buttons")
    print("‚Ä¢ /create_campaign I want to promote my crypto course - Should generate AI content")
    print("‚Ä¢ /generate crypto market analysis - Should create content")
    print("‚Ä¢ /analytics - Should show analytics dashboard")
    print("‚Ä¢ /trends - Should display trending topics")
    print("‚Ä¢ /settings - Should open settings menu")
    print("‚Ä¢ /status - Should show system status")
    print()
    print("**Step 3: Test Interactive Buttons**")
    print("‚Ä¢ Click any button in /help menu - Should open corresponding feature")
    print("‚Ä¢ Click 'Quick Generate' - Should generate content with AI")
    print("‚Ä¢ Click 'Automation Menu' - Should show automation controls")
    print("‚Ä¢ Click 'Dashboard' - Should display analytics")
    print("‚Ä¢ Click 'Settings' - Should open configuration options")
    print()
    print("**Step 4: Test Natural Language Processing**")
    print("‚Ä¢ Try: /create_campaign I want to promote my DeFi tutorial")
    print("‚Ä¢ Try: /create_campaign Help me market my blockchain course")
    print("‚Ä¢ Try: /generate content about cryptocurrency safety")
    print()
    print("**Expected Results:**")
    print("‚úÖ All commands should respond immediately")
    print("‚úÖ All buttons should perform actions (not show 'unknown action')")
    print("‚úÖ Natural language should be processed by AI")
    print("‚úÖ Generated content should be relevant and well-formatted")
    print("‚úÖ Menus should be interactive and functional")
    print()
    print("**If any command shows 'unknown command' or button shows 'unknown action':**")
    print("‚ùå There's still a functionality issue that needs fixing")

def main():
    """Run comprehensive functionality test"""
    print("ü§ñ X Marketing Platform - Fixed Functionality Test")
    print("üîß Testing All Commands and Callback Buttons")
    print("=" * 70)
    print(f"‚è∞ Test started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Run all tests
    bot_healthy = test_bot_status()
    telegram_connected, bot_data = test_telegram_connection()
    llm_working = test_llm_integration()
    campaign_working = test_create_campaign_workflow()
    analysis_working = test_content_analysis()
    services_communicating = test_service_communication()
    
    # Calculate success rate
    tests = [
        bot_healthy,
        telegram_connected,
        llm_working,
        campaign_working,
        analysis_working,
        services_communicating
    ]
    
    passed_tests = sum(tests)
    total_tests = len(tests)
    success_rate = (passed_tests / total_tests) * 100
    
    # Final summary
    print("\n" + "=" * 70)
    print("üìä FIXED FUNCTIONALITY TEST SUMMARY")
    print("=" * 70)
    print(f"Bot Health: {'‚úÖ HEALTHY' if bot_healthy else '‚ùå UNHEALTHY'}")
    print(f"Telegram Connection: {'‚úÖ CONNECTED' if telegram_connected else '‚ùå DISCONNECTED'}")
    print(f"LLM Integration: {'‚úÖ WORKING' if llm_working else '‚ùå FAILED'}")
    print(f"Campaign Creation: {'‚úÖ WORKING' if campaign_working else '‚ùå FAILED'}")
    print(f"Content Analysis: {'‚úÖ WORKING' if analysis_working else '‚ùå FAILED'}")
    print(f"Service Communication: {'‚úÖ WORKING' if services_communicating else '‚ùå FAILED'}")
    print()
    print(f"Overall Success Rate: {success_rate:.1f}%")
    print()
    
    if success_rate >= 90:
        print("üéâ EXCELLENT! All functionality is working!")
        print("‚úÖ Commands should respond properly")
        print("‚úÖ Buttons should perform actions")
        print("‚úÖ Natural language processing operational")
        print("‚úÖ AI integration fully functional")
    elif success_rate >= 70:
        print("‚ö†Ô∏è  GOOD! Most functionality working")
        print("‚úÖ Core features operational")
        print("‚ö†Ô∏è  Minor issues may remain")
    else:
        print("‚ùå NEEDS WORK! Major functionality issues")
        print("‚ùå Commands or buttons not working properly")
        print("‚ùå Integration problems detected")
    
    if bot_data and telegram_connected:
        print(f"\nü§ñ Bot Status: @{bot_data.get('username')} is live and ready!")
        print("üì± Users can now interact with fully functional bot")
        print("üöÄ All commands and buttons should work properly")
    
    # Show testing guide
    create_user_testing_guide()
    
    print(f"\n‚è∞ Test completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    return success_rate

if __name__ == "__main__":
    main()
